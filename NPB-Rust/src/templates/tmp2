use std::env;
use std::time::Instant;
use chrono::Local;
use std::thread;
use std::sync::{Arc, Mutex, Barrier};
use rayon::prelude::*;

use common::rust_timers;
use common::print_results;
use common::randdp;

const NPBVERSION: &str = "4.1.2";
const COMPILERVERSION: &str = "rustc 1.70.0-nightly";
const LIBVERSION: &str = "1";
const CS1: &str = "";
const CS2: &str = "";
const CS3: &str = "";
const CS4: &str = "";
const CS5: &str = "";
const CS6: &str = "";
const CS7: &str = "";

const RCOND: f64 = 0.1;

fn main() {
    let init_timer = Instant::now();
    let COMPILETIME: String = Local::now().to_rfc3339();
    
    let CLASS = %% CLASS_NPB %%;
    let class_upper = CLASS.to_uppercase();
    
    let args: Vec<String> = env::args().collect();
    let NUM_THREADS: usize = if args.len() > 1 {
        args[1].parse::<usize>().unwrap()
    } else {
        1
    };
    
    println!("Starting benchmark with {} threads", NUM_THREADS);
    
    let NA: i32 = match class_upper.as_str() {
        "S" => 1400,
        "W" => 7000,
        "A" => 14000,
        "B" => 75000,
        "C" => 150000,
        "D" => 1500000,
        "E" => 9000000,
        _ => 1400
    };
    
    let NONZER: i32 = match class_upper.as_str() {
        "S" => 7,
        "W" => 8,
        "A" => 11,
        "B" => 13,
        "C" => 15,
        "D" => 21,
        "E" => 26,
        _ => 7
    };
    
    let NITER: i32 = match class_upper.as_str() {
        "S" => 15,
        "W" => 15,
        "A" => 15,
        "B" => 75,
        "C" => 75,
        "D" => 100,
        "E" => 100,
        _ => 15
    };
    
    let SHIFT: f64 = match class_upper.as_str() {
        "S" => 10.0,
        "W" => 12.0,
        "A" => 20.0,
        "B" => 60.0,
        "C" => 110.0,
        "D" => 500.0,
        "E" => 1500.0,
        _ => 10.0
    };
    
    let NZ = NA * (NONZER + 1) * (NONZER + 1);
    let NAZ = NA * (NONZER + 1);
    
    let rowstr = Arc::new(Mutex::new(vec![0; (NA + 1) as usize]));
    let colidx = Arc::new(Mutex::new(vec![0; NZ as usize]));
    let mut iv: Vec<i32> = vec![0; NA as usize];
    let mut arow: Vec<i32> = vec![0; NA as usize];
    let mut acol: Vec<i32> = vec![0; NAZ as usize];
    let mut aelt: Vec<f64> = vec![0.0; NAZ as usize];
    let a = Arc::new(Mutex::new(vec![0.0; NZ as usize]));
    
    let x = Arc::new(Mutex::new(vec![0.0; (NA + 2) as usize]));
    let z = Arc::new(Mutex::new(vec![0.0; (NA + 2) as usize]));
    let p = Arc::new(Mutex::new(vec![0.0; (NA + 2) as usize]));
    let q = Arc::new(Mutex::new(vec![0.0; (NA + 2) as usize]));
    let r = Arc::new(Mutex::new(vec![0.0; (NA + 2) as usize]));
    
    let mut naa: i32 = 0;
    let mut nzz: i32 = 0;
    let firstrow: i32 = 0;
    let lastrow: i32 = NA - 1;
    let firstcol: i32 = 0;
    let lastcol: i32 = NA - 1;
    
    let zeta_verify_value = match class_upper.as_str() {
        "S" => 8.5971775078648,
        "W" => 10.362595087124,
        "A" => 17.130235054029,
        "B" => 22.712745482631,
        "C" => 28.973605592845,
        "D" => 52.514532105794,
        "E" => 77.522164599383,
        _ => 8.5971775078648
    };
    
    println!("\n\n NAS Parallel Benchmarks 4.1 Parallel Rust version - CG Benchmark\n");
    println!(" Size: {}", &NA);
    println!(" Iterations: {}", &NITER);
    println!(" Number of threads: {}", NUM_THREADS);
    
    naa = NA;
    nzz = NZ;
    
    let mut tran = 314159265.0;
    let amult = 1220703125.0;
    let mut zeta = randdp::randlc(&mut tran, amult);
    
    makea_parallel(
        &mut naa,
        &mut nzz,
        &a,
        &colidx,
        &rowstr,
        &firstrow,
        &lastrow,
        &firstcol,
        &lastcol,
        &mut arow,
        &mut acol,
        &mut aelt,
        &mut iv,
        &NONZER,
        &SHIFT,
        &mut tran,
        &amult,
        NUM_THREADS,
    );
    
    println!("Matrix creation complete");
    
    let chunk_size = ((lastcol - firstcol) as usize + NUM_THREADS - 1) / NUM_THREADS;
    let barrier = Arc::new(Barrier::new(NUM_THREADS));
    
    let mut handles = vec![];
    for tid in 0..NUM_THREADS {
        let colidx_clone = Arc::clone(&colidx);
        let rowstr_clone = Arc::clone(&rowstr);
        let barrier_clone = Arc::clone(&barrier);
        
        let start = firstcol as usize + tid * chunk_size;
        let end = (firstcol as usize + (tid + 1) * chunk_size).min(lastcol as usize + 1);
        
        handles.push(thread::spawn(move || {
            let rowstr_guard = rowstr_clone.lock().unwrap();
            let mut colidx_guard = colidx_clone.lock().unwrap();
            
            for j in start..end {
                let row_start = rowstr_guard[j];
                let row_end = rowstr_guard[j + 1];
                
                for k in row_start..row_end {
                    colidx_guard[k as usize] -= firstcol;
                }
            }
            
            barrier_clone.wait();
        }));
    }
    
    for handle in handles {
        handle.join().unwrap();
    }
    
    {
        let mut x_guard = x.lock().unwrap();
        for i in 0..=NA {
            x_guard[i as usize] = 1.0;
        }
    }
    
    {
        let mut q_guard = q.lock().unwrap();
        let mut z_guard = z.lock().unwrap();
        let mut r_guard = r.lock().unwrap();
        let mut p_guard = p.lock().unwrap();
        
        for j in 0..=(lastcol - firstcol) {
            q_guard[j as usize] = 0.0;
            z_guard[j as usize] = 0.0;
            r_guard[j as usize] = 0.0;
            p_guard[j as usize] = 0.0;
        }
    }
    
    zeta = 0.0;

    let mut rnorm = 0.0;
    
    println!("Starting conj_grad computation...");
    
    conj_grad_parallel(
        &colidx,
        &rowstr,
        &x,
        &z,
        &a,
        &p,
        &q,
        &r,
        &mut rnorm,
        &naa,
        &lastcol,
        &firstcol,
        &lastrow,
        &firstrow,
        NUM_THREADS,
    );
    
    let mut norm_temp1 = 0.0;
    let mut norm_temp2 = 0.0;
    
    {
        let x_guard = x.lock().unwrap();
        let z_guard = z.lock().unwrap();
        
        for j in 0..=(lastcol - firstcol) {
            norm_temp1 += x_guard[j as usize] * z_guard[j as usize];
            norm_temp2 += z_guard[j as usize] * z_guard[j as usize];
        }
    }
    
    norm_temp2 = 1.0 / norm_temp2.sqrt();
    
    {
        let mut x_guard = x.lock().unwrap();
        let z_guard = z.lock().unwrap();
        
        for j in 0..=(lastcol - firstcol) {
            x_guard[j as usize] = norm_temp2 * z_guard[j as usize];
        }
    }
    
    {
        let mut x_guard = x.lock().unwrap();
        for i in 0..=NA {
            x_guard[i as usize] = 1.0;
        }
    }
    
    zeta = 0.0;
    
    let init_time = init_timer.elapsed().as_secs_f64();
    println!(" Initialization time = {} seconds", init_time);
    
    let bench_timer = Instant::now();
    
    println!("\n   iteration           ||r||                 zeta");
    
    for it in 1..=NITER {
        conj_grad_parallel(
            &colidx,
            &rowstr,
            &x,
            &z,
            &a,
            &p,
            &q,
            &r,
            &mut rnorm,
            &naa,
            &lastcol,
            &firstcol,
            &lastrow,
            &firstrow,
            NUM_THREADS,
        );
        
        norm_temp1 = 0.0;
        norm_temp2 = 0.0;
        
        {
            let x_guard = x.lock().unwrap();
            let z_guard = z.lock().unwrap();
            
            for j in 0..=(lastcol - firstcol) {
                norm_temp1 += x_guard[j as usize] * z_guard[j as usize];
                norm_temp2 += z_guard[j as usize] * z_guard[j as usize];
            }
        }
        
        norm_temp2 = 1.0 / norm_temp2.sqrt();
        zeta = SHIFT + 1.0 / norm_temp1;
        
        println!("    {}       {}   {}", &it, &rnorm, &zeta);
        
        {
            let mut x_guard = x.lock().unwrap();
            let z_guard = z.lock().unwrap();
            
            for j in 0..=(lastcol - firstcol) {
                x_guard[j as usize] = norm_temp2 * z_guard[j as usize];
            }
        }
    }
    
    let bench_time = bench_timer.elapsed().as_secs_f64();
    println!(" Benchmark completed");
    
    let epsilon = 0.0000000001;
    let err = (zeta - zeta_verify_value).abs() / zeta_verify_value;
    
    let verified = if err <= epsilon {
        println!(" VERIFICATION SUCCESSFUL");
        println!(" Zeta is    {}", zeta);
        println!(" Error is   {}", err);
        true
    } else {
        println!(" VERIFICATION FAILED");
        println!(" Zeta is    {}", zeta);
        println!(" Error is   {}", err);
        false
    };
    
    let mflops = if bench_time != 0.0 {
        (2.0 * NITER as f64 * NA as f64)
            * (3.0 + (NONZER as f64 * (NONZER as f64 + 1.0))
                + 25.0 * (5.0 + (NONZER as f64 * (NONZER as f64 + 1.0)))
                + 3.0)
            / bench_time
            / 1000000.0
    } else {
        0.0
    };
    
    print_results::rust_print_results(
        "CG",
        CLASS,
        NA as usize,
        NUM_THREADS as i32,
        0,
        NITER,
        bench_time,
        mflops,
        "          floating point",
        verified,
        NPBVERSION,
        COMPILETIME.as_str(),
        COMPILERVERSION,
        LIBVERSION,
        &NUM_THREADS.to_string(),
        CS1,
        CS2,
        CS3,
        CS4,
        CS5,
        CS6,
        CS7,
    );
}

fn conj_grad_parallel(
    colidx: &Arc<Mutex<Vec<i32>>>,
    rowstr: &Arc<Mutex<Vec<i32>>>,
    x: &Arc<Mutex<Vec<f64>>>,
    z: &Arc<Mutex<Vec<f64>>>,
    a: &Arc<Mutex<Vec<f64>>>,
    p: &Arc<Mutex<Vec<f64>>>,
    q: &Arc<Mutex<Vec<f64>>>,
    r: &Arc<Mutex<Vec<f64>>>,
    rnorm: &mut f64,
    naa: &i32,
    lastcol: &i32,
    firstcol: &i32,
    lastrow: &i32,
    firstrow: &i32,
    num_threads: usize,
) {
    let cgitmax = 25;
    
    let rowstr_data = rowstr.lock().unwrap().clone();
    let colidx_data = colidx.lock().unwrap().clone();
    let a_data = a.lock().unwrap().clone();
    
    {
        let mut q_guard = q.lock().unwrap();
        let mut z_guard = z.lock().unwrap();
        let mut r_guard = r.lock().unwrap();
        let mut p_guard = p.lock().unwrap();
        let x_guard = x.lock().unwrap();
        
        for j in 0..=(*naa) {
            q_guard[j as usize] = 0.0;
            z_guard[j as usize] = 0.0;
            r_guard[j as usize] = x_guard[j as usize];
            p_guard[j as usize] = r_guard[j as usize];
        }
    }
    
    let mut rho = 0.0;
    
    {
        let r_guard = r.lock().unwrap();
        for j in 0..=(*lastcol - *firstcol) {
            rho += r_guard[j as usize] * r_guard[j as usize];
        }
    }
    
    for _cgit in 1..=cgitmax {
        {
            let mut q_guard = q.lock().unwrap();
            let p_guard = p.lock().unwrap();
            
            let chunk_size = ((*lastrow - *firstrow) as usize + num_threads - 1) / num_threads;
            let handles: Vec<_> = (0..num_threads)
                .map(|tid| {
                    let start = *firstrow as usize + tid * chunk_size;
                    let end = (*firstrow as usize + (tid + 1) * chunk_size).min(*lastrow as usize + 1);
                    
                    let rowstr_data = rowstr_data.clone();
                    let colidx_data = colidx_data.clone();
                    let a_data = a_data.clone();
                    let p_guard = p_guard.clone();
                    
                    thread::spawn(move || {
                        let mut local_q = vec![0.0; end - start];
                        
                        for (idx, j) in (start..end).enumerate() {
                            let mut sum = 0.0;
                            
                            for k in rowstr_data[j]..rowstr_data[j + 1] {
                                sum += a_data[k as usize] * p_guard[colidx_data[k as usize] as usize];
                            }
                            
                            local_q[idx] = sum;
                        }
                        
                        (start, local_q)
                    })
                })
                .collect();
            
            for handle in handles {
                let (start, local_q) = handle.join().unwrap();
                
                for (idx, q_val) in local_q.iter().enumerate() {
                    q_guard[(start + idx) as usize] = *q_val;
                }
            }
        }
        
        let mut d = 0.0;
        
        {
            let p_guard = p.lock().unwrap();
            let q_guard = q.lock().unwrap();
            
            for j in 0..=(*lastcol - *firstcol) {
                d += p_guard[j as usize] * q_guard[j as usize];
            }
        }
        
        let alpha = rho / d;
        let rho0 = rho;
        
        rho = 0.0;
        
        {
            let mut z_guard = z.lock().unwrap();
            let mut r_guard = r.lock().unwrap();
            let p_guard = p.lock().unwrap();
            let q_guard = q.lock().unwrap();
            
            let chunk_size = ((*lastcol - *firstcol) as usize + num_threads - 1) / num_threads;
            let handles: Vec<_> = (0..num_threads)
                .map(|tid| {
                    let start = tid * chunk_size;
                    let end = ((tid + 1) * chunk_size).min((*lastcol - *firstcol) as usize + 1);
                    
                    let p_data = p_guard.clone();
                    let q_data = q_guard.clone();
                    
                    thread::spawn(move || {
                        let mut local_z = vec![0.0; end - start];
                        let mut local_r = vec![0.0; end - start];
                        
                        for (idx, j) in (start..end).enumerate() {
                            local_z[idx] = z_guard[j] + alpha * p_data[j];
                            local_r[idx] = r_guard[j] - alpha * q_data[j];
                        }
                        
                        (start, local_z, local_r)
                    })
                })
                .collect();
            
            for handle in handles {
                let (start, local_z, local_r) = handle.join().unwrap();
                
                for (idx, (z_val, r_val)) in local_z.iter().zip(local_r.iter()).enumerate() {
                    z_guard[start + idx] = *z_val;
                    r_guard[start + idx] = *r_val;
                }
            }
            
            for j in 0..=(*lastcol - *firstcol) {
                rho += r_guard[j as usize] * r_guard[j as usize];
            }
        }
        
        let beta = rho / rho0;
        
        {
            let mut p_guard = p.lock().unwrap();
            let r_guard = r.lock().unwrap();
            
            let chunk_size = ((*lastcol - *firstcol) as usize + num_threads - 1) / num_threads;
            let handles: Vec<_> = (0..num_threads)
                .map(|tid| {
                    let start = tid * chunk_size;
                    let end = ((tid + 1) * chunk_size).min((*lastcol - *firstcol) as usize + 1);
                    
                    let r_data = r_guard.clone();
                    let p_data = p_guard.clone();
                    
                    thread::spawn(move || {
                        let mut local_p = vec![0.0; end - start];
                        
                        for (idx, j) in (start..end).enumerate() {
                            local_p[idx] = r_data[j] + beta * p_data[j];
                        }
                        
                        (start, local_p)
                    })
                })
                .collect();
            
            for handle in handles {
                let (start, local_p) = handle.join().unwrap();
                
                for (idx, p_val) in local_p.iter().enumerate() {
                    p_guard[start + idx] = *p_val;
                }
            }
        }
    }
    
    {
        let mut r_guard = r.lock().unwrap();
        let z_guard = z.lock().unwrap();
        
        let chunk_size = ((*lastrow - *firstrow) as usize + num_threads - 1) / num_threads;
        let handles: Vec<_> = (0..num_threads)
            .map(|tid| {
                let start = *firstrow as usize + 1 + tid * chunk_size;
                let end = (*firstrow as usize + 1 + (tid + 1) * chunk_size).min(*lastrow as usize + 1);
                
                let rowstr_data = rowstr_data.clone();
                let colidx_data = colidx_data.clone();
                let a_data = a_data.clone();
                let z_data = z_guard.clone();
                
                thread::spawn(move || {
                    let mut local_r = vec![0.0; end - start];
                    
                    for (idx, j) in (start..end).enumerate() {
                        let mut d = 0.0;
                        
                        for k in rowstr_data[j]..rowstr_data[j + 1] {
                            d += a_data[k as usize] * z_data[colidx_data[k as usize] as usize];
                        }
                        
                        local_r[idx] = d;
                    }
                    
                    (start, local_r)
                })
            })
            .collect();
        
        for handle in handles {
            let (start, local_r) = handle.join().unwrap();
            
            for (idx, r_val) in local_r.iter().enumerate() {
                r_guard[start + idx] = *r_val;
            }
        }
    }
    
    let mut sum = 0.0;
    
    {
        let x_guard = x.lock().unwrap();
        let r_guard = r.lock().unwrap();
        
        for j in 0..=(*lastcol - *firstcol) {
            let d = x_guard[j as usize] - r_guard[j as usize];
            sum += d * d;
        }
    }
    
    *rnorm = sum.sqrt();
}

fn makea_parallel(
    n: &mut i32,
    nz: &mut i32,
    a: &Arc<Mutex<Vec<f64>>>,
    colidx: &Arc<Mutex<Vec<i32>>>,
    rowstr: &Arc<Mutex<Vec<i32>>>,
    firstrow: &i32,
    lastrow: &i32,
    firstcol: &i32,
    lastcol: &i32,
    arow: &mut Vec<i32>,
    acol: &mut Vec<i32>,
    aelt: &mut Vec<f64>,
    iv: &mut Vec<i32>,
    nonzer: &i32,
    shift: &f64,
    tran: &mut f64,
    amult: &f64,
    num_threads: usize,
) {
    let mut nn1 = 1;
    
    loop {
        nn1 = 2 * nn1;
        if nn1 >= *n {
            break;
        }
    }
    
    let chunk_size = (*n as usize + num_threads - 1) / num_threads;
    let handles: Vec<_> = (0..num_threads)
        .map(|tid| {
            let start = tid * chunk_size;
            let end = ((tid + 1) * chunk_size).min(*n as usize);
            
            let nonzer = *nonzer;
            let mut tran_local = *tran;
            let amult = *amult;
            
            thread::spawn(move || {
                let mut local_arow = vec![0; end - start];
                let mut local_acol = vec![0; (end - start) * (nonzer as usize + 1)];
                let mut local_aelt = vec![0.0; (end - start) * (nonzer as usize + 1)];
                
                for (idx, iouter) in (start..end).enumerate() {
                    let mut nzv = nonzer;
                    let mut vc = vec![0.0; (nonzer + 1) as usize];
                    let mut ivc = vec![0; (nonzer + 1) as usize];
                    
                    sprnvc_local(n, &mut nzv, &nn1, &mut vc, &mut ivc, &mut tran_local, &amult);
                    vecset_local(n, &mut vc, &mut ivc, &mut nzv, iouter as i32 + 1, 0.5);
                    
                    local_arow[idx] = nzv;
                    
                    for ivelt in 0..nzv {
                        local_acol[idx * (nonzer as usize + 1) + ivelt as usize] = ivc[ivelt as usize] - 1;
                        local_aelt[idx * (nonzer as usize + 1) + ivelt as usize] = vc[ivelt as usize];
                    }
                }
                
                (start, local_arow, local_acol, local_aelt, tran_local)
            })
        })
        .collect();
    
    let mut tran_new = *tran;
    
    for handle in handles {
        let (start, local_arow, local_acol, local_aelt, tran_local) = handle.join().unwrap();
        
        for (idx, arow_val) in local_arow.iter().enumerate() {
            arow[start + idx] = *arow_val;
        }
        
        for iouter in 0..(local_arow.len()) {
            for ivelt in 0..local_arow[iouter] {
                acol[(start + iouter) * (*nonzer as usize + 1) + ivelt as usize] = 
                    local_acol[iouter * (*nonzer as usize + 1) + ivelt as usize];
                aelt[(start + iouter) * (*nonzer as usize + 1) + ivelt as usize] = 
                    local_aelt[iouter * (*nonzer as usize + 1) + ivelt as usize];
            }
        }
        
        tran_new = tran_local;
    }
    
    *tran = tran_new;
    
    sparse_parallel(
        a,
        colidx,
        rowstr,
        n,
        nz,
        nonzer,
        arow,
        acol,
        aelt,
        firstrow,
        lastrow,
        iv,
        shift,
        num_threads,
    );
}

fn sparse_parallel(
    a: &Arc<Mutex<Vec<f64>>>,
    colidx: &Arc<Mutex<Vec<i32>>>,
    rowstr: &Arc<Mutex<Vec<i32>>>,
    n: &mut i32,
    nz: &mut i32,
    nozer: &i32,
    arow: &mut Vec<i32>,
    acol: &mut Vec<i32>,
    aelt: &mut Vec<f64>,
    firstrow: &i32,
    lastrow: &i32,
    nzloc: &mut Vec<i32>,
    shift: &f64,
    num_threads: usize,
) {
    let nrows = *lastrow - *firstrow + 1;
    
    {
        let mut rowstr_guard = rowstr.lock().unwrap();
        rowstr_guard[0] = 0;
        for j in 1..=nrows {
            rowstr_guard[j as usize] = rowstr_guard[j as usize] + rowstr_guard[(j - 1) as usize];
        }
        
        let nza = rowstr_guard[nrows as usize] - 1;
        if nza > *nz {
            println!("Space for matrix elements exceeded in sparse");
            println!("nza, nzmax = {}, {}", &nza, &nz);
            std::process::exit(-1);
        }
    }
    
    {
        let rowstr_guard = rowstr.lock().unwrap();
        let rowstr_data = rowstr_guard.clone();
        
        let mut a_guard = a.lock().unwrap();
        let mut colidx_guard = colidx.lock().unwrap();
        
        for j in 0..nrows {
            for k in rowstr_data[j as usize]..rowstr_data[(j + 1) as usize] {
                a_guard[k as usize] = 0.0;
                colidx_guard[k as usize] = -1;
            }
            nzloc[j as usize] = 0;
        }
    }
    
    let size = 1.0;
    let ratio = f64::powf(RCOND, 1.0 / (*n as f64));
    
    let chunk_size = (*n as usize + num_threads - 1) / num_threads;
    let handles: Vec<_> = (0..num_threads)
        .map(|tid| {
            let start = tid * chunk_size;
            let end = ((tid + 1) * chunk_size).min(*n as usize);
            
            let nozer = *nozer;
            let acol = acol.to_vec();
            let aelt = aelt.to_vec();
            let arow = arow.to_vec();
            let shift = *shift;
            
            let a_clone = Arc::clone(a);
            let colidx_clone = Arc::clone(colidx);
            let rowstr_clone = Arc::clone(rowstr);
            
            thread::spawn(move || {
                let rowstr_data = rowstr_clone.lock().unwrap().clone();
                let mut local_nzloc = vec![0; nrows as usize];
                
                for i in start..end {
                    let mut cur_size = size * f64::powi(ratio, i as i32);
                    
                    for nza in 0..arow[i] {
                        let j = acol[(i * (nozer + 1) as usize + nza as usize)];
                        
                        let scale = cur_size * aelt[(i * (nozer + 1) as usize + nza as usize)];
                        
                        for nzrow in 0..arow[i] {
                            let jcol = acol[(i * (nozer + 1) as usize + nzrow as usize)];
                            let va = aelt[(i * (nozer + 1) as usize + nzrow as usize)] * scale;
                            
                            let mut va_adjusted = va;
                            if (jcol == j) && (j == i as i32) {
                                va_adjusted = va + RCOND - shift;
                            }
                            
                            let mut found = false;
                            let mut k_idx = 0;
                            
                            {
                                let mut a_guard = a_clone.lock().unwrap();
                                let mut colidx_guard = colidx_clone.lock().unwrap();
                                
                                for k in rowstr_data[j as usize]..rowstr_data[(j + 1) as usize] {
                                    if colidx_guard[k as usize] > jcol {
                                        let mut kk = rowstr_data[(j + 1) as usize] - 2;
                                        while kk >= k {
                                            if colidx_guard[kk as usize] > -1 {
                                                a_guard[(kk + 1) as usize] = a_guard[kk as usize];
                                                colidx_guard[(kk + 1) as usize] = colidx_guard[kk as usize];
                                            }
                                            kk -= 1;
                                        }
                                        
                                        colidx_guard[k as usize] = jcol;
                                        a_guard[k as usize] = 0.0;
                                        k_idx = k;
                                        found = true;
                                        break;
                                    } else if colidx_guard[k as usize] == -1 {
                                        colidx_guard[k as usize] = jcol;
                                        k_idx = k;
                                        found = true;
                                        break;
                                    } else if colidx_guard[k as usize] == jcol {
                                        local_nzloc[j as usize] = local_nzloc[j as usize] + 1;
                                        k_idx = k;
                                        found = true;
                                        break;
                                    }
                                }
                                
                                if found {
                                    a_guard[k_idx as usize] = a_guard[k_idx as usize] + va_adjusted;
                                } else {
                                    println!("internal error in sparse: i = {}", i);
                                    std::process::exit(-1);
                                }
                            }
                        }
                    }
                }
                
                local_nzloc
            })
        })
        .collect();
    
    let mut all_nzloc = vec![vec![0; nrows as usize]; num_threads];
    
    for (idx, handle) in handles.into_iter().enumerate() {
        all_nzloc[idx] = handle.join().unwrap();
    }
    
    for j in 0..nrows as usize {
        for t in 0..num_threads {
            nzloc[j] += all_nzloc[t][j];
        }
    }
    
    for j in 1..nrows as usize {
        nzloc[j] = nzloc[j] + nzloc[j - 1];
    }
    
    let rowstr_data = rowstr.lock().unwrap().clone();
    
    for j in 0..nrows as usize {
        let j1 = if j > 0 { rowstr_data[j] - nzloc[j - 1] } else { 0 };
        let j2 = rowstr_data[j + 1] - nzloc[j];
        let nza = rowstr_data[j];
        
        let mut a_guard = a.lock().unwrap();
        let mut colidx_guard = colidx.lock().unwrap();
        
        for k in j1..j2 {
            a_guard[k as usize] = a_guard[nza as usize];
            colidx_guard[k as usize] = colidx_guard[nza as usize];
        }
    }
    
    let mut rowstr_guard = rowstr.lock().unwrap();
    for j in 1..=nrows {
        rowstr_guard[j as usize] = rowstr_guard[j as usize] - nzloc[(j - 1) as usize];
    }
}

fn icnvrt(x: &f64, ipwr2: &i32) -> i32 {
    ((*ipwr2 as f64) * (*x)).trunc() as i32
}

fn sprnvc_local(
    n: &i32,
    nz: &mut i32,
    nn1: &i32,
    v: &mut Vec<f64>,
    iv: &mut Vec<i32>,
    tran: &mut f64,
    amult: &f64,
) {
    let mut nzv = 0;
    
    while nzv < *nz {
        let vecelt = randdp::randlc(tran, *amult);
        let vecloc = randdp::randlc(tran, *amult);
        let i = icnvrt(&vecloc, nn1) + 1;
        
        if i > *n {
            continue;
        }
        
        let mut was_gen = false;
        for ii in 0..nzv {
            if iv[ii as usize] == i {
                was_gen = true;
                break;
            }
        }
        
        if was_gen {
            continue;
        }
        
        v[nzv as usize] = vecelt;
        iv[nzv as usize] = i;
        nzv += 1;
    }
}

fn vecset_local(
    _n: &i32,
    v: &mut Vec<f64>,
    iv: &mut Vec<i32>,
    nzv: &mut i32,
    i: i32,
    val: f64,
) {
    let mut set = false;
    
    for k in 0..*nzv {
        if iv[k as usize] == i {
            v[k as usize] = val;
            set = true;
            break;
        }
    }
    
    if !set {
        v[*nzv as usize] = val;
        iv[*nzv as usize] = i;
        *nzv += 1;
    }
}